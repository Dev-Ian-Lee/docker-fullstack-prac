# AWS Docker 브랜치 운영, 배포를 위한 docker-compose 코드
version: "3"
services:
  frontend:
    image: desfox/docker-frontend

    volumes:
      - /app/node_modules
      - ./frontend:/app

    mem_limit: 128m

  nginx:
    # 재시작 정책
    restart: always
    image: desfox/docker-nginx
    
    ports:
      - "80:80"

    mem_limit: 128m
    links:
      - frontend
      - backend

  backend:
    image: desfox/docker-backend

    container_name: app_backend

    volumes:
      - /app/node_modules
      - ./backend:/app
    
    environment:
      - MYSQL_HOST=docker-fullstack-mysql.ch7afbdlmknt.ap-northeast-2.rds.amazonaws.com
      - MYSQL_USER=root
      - MYSQL_ROOT_PASSWORD=password
      - MYSQL_DATABASE=myapp
      - MYSQL_PORT=3306
    mem_limit: 128m

# 개발 환경에서 어플리케이션을 쉽게 실행하기 위한 docker-compose 코드
# version: "3"
# services:
#   frontend:
#     build:
#       # dockerfile의 이름과 위치 
#       dockerfile: Dockerfile.dev
#       context: ./frontend

#     volumes:
#       - /app/node_modules
#       - ./frontend:/app

#   nginx:
#     # 재시작 정책
#     restart: always

#     build:
#       dockerfile: Dockerfile
#       context: ./nginx
    
#     ports:
#       - "3000:80"

#   backend:
#     build:
#       dockerfile: Dockerfile.dev
#       context: ./backend

#     container_name: app_backend

#     volumes:
#       - /app/node_modules
#       - ./backend:/app

#   # mysql:
#   #   build: ./mysql

#   #   restart: unless-stopped

#   #   container_name: app_mysql

#   #   ports:
#   #     - "3306:3306"

#   #   volumes:
#   #     - ./mysql/mysql_data:/var/lib/mysql
#   #     - ./mysql/sqls/:/docker-entrypoint-initdb.d/

#   #   environment:
#   #     - MYSQL_ROOT_PASSWORD=password
#   #     - MYSQL_DATABASE=myapp